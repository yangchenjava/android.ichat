package com.yangc.ichat.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yangc.ichat.database.DaoSession;

import com.yangc.ichat.database.bean.TIchatMe;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T_ICHAT_ME.
*/
public class TIchatMeDao extends AbstractDao<TIchatMe, Long> {

    public static final String TABLENAME = "T_ICHAT_ME";

    /**
     * Properties of entity TIchatMe.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Sex = new Property(2, Long.class, "sex", false, "SEX");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Spell = new Property(4, String.class, "spell", false, "SPELL");
        public final static Property Photo = new Property(5, String.class, "photo", false, "PHOTO");
        public final static Property Signature = new Property(6, String.class, "signature", false, "SIGNATURE");
        public final static Property UserId = new Property(7, Long.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(8, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(9, String.class, "password", false, "PASSWORD");
    };


    public TIchatMeDao(DaoConfig config) {
        super(config);
    }
    
    public TIchatMeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T_ICHAT_ME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NICKNAME' TEXT," + // 1: nickname
                "'SEX' INTEGER," + // 2: sex
                "'PHONE' TEXT," + // 3: phone
                "'SPELL' TEXT," + // 4: spell
                "'PHOTO' TEXT," + // 5: photo
                "'SIGNATURE' TEXT," + // 6: signature
                "'USER_ID' INTEGER," + // 7: userId
                "'USERNAME' TEXT," + // 8: username
                "'PASSWORD' TEXT);"); // 9: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T_ICHAT_ME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TIchatMe entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        Long sex = entity.getSex();
        if (sex != null) {
            stmt.bindLong(3, sex);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(5, spell);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(6, photo);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(7, signature);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(8, userId);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(9, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TIchatMe readEntity(Cursor cursor, int offset) {
        TIchatMe entity = new TIchatMe( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // spell
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // photo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // signature
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // userId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // username
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // password
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TIchatMe entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSpell(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhoto(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSignature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setUsername(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TIchatMe entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TIchatMe entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
