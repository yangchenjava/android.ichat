package com.yangc.ichat.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yangc.ichat.database.DaoSession;

import com.yangc.ichat.database.bean.TIchatHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table T_ICHAT_HISTORY.
*/
public class TIchatHistoryDao extends AbstractDao<TIchatHistory, Long> {

    public static final String TABLENAME = "T_ICHAT_HISTORY";

    /**
     * Properties of entity TIchatHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Chat = new Property(3, String.class, "chat", false, "CHAT");
        public final static Property Type = new Property(4, Long.class, "type", false, "TYPE");
        public final static Property ChatStatus = new Property(5, Long.class, "chatStatus", false, "CHAT_STATUS");
        public final static Property TransmitStatus = new Property(6, Long.class, "transmitStatus", false, "TRANSMIT_STATUS");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
    };


    public TIchatHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public TIchatHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T_ICHAT_HISTORY' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'UUID' TEXT," + // 1: uuid
                "'USERNAME' TEXT," + // 2: username
                "'CHAT' TEXT," + // 3: chat
                "'TYPE' INTEGER," + // 4: type
                "'CHAT_STATUS' INTEGER," + // 5: chatStatus
                "'TRANSMIT_STATUS' INTEGER," + // 6: transmitStatus
                "'DATE' INTEGER);"); // 7: date
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_T_ICHAT_HISTORY_USERNAME ON T_ICHAT_HISTORY" +
                " (USERNAME);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T_ICHAT_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TIchatHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String chat = entity.getChat();
        if (chat != null) {
            stmt.bindString(4, chat);
        }
 
        Long type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Long chatStatus = entity.getChatStatus();
        if (chatStatus != null) {
            stmt.bindLong(6, chatStatus);
        }
 
        Long transmitStatus = entity.getTransmitStatus();
        if (transmitStatus != null) {
            stmt.bindLong(7, transmitStatus);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TIchatHistory readEntity(Cursor cursor, int offset) {
        TIchatHistory entity = new TIchatHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chat
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // chatStatus
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // transmitStatus
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TIchatHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChat(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setChatStatus(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTransmitStatus(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TIchatHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TIchatHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
